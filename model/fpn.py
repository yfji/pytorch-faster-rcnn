from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import torch
import torch.nn as nn
import math
import torch.nn.functional as F

class FPN(nn.Module): # xavier_fill as default
    def __init__(self, out_channels):
        super(FPN, self).__init__()
        self.out_channels = out_channels
        self.P6 = nn.MaxPool2d(kernel_size=1, stride=2, padding=0, ceil_mode=False)
        self.P5_conv1 = nn.Conv2d(2048, self.out_channels, kernel_size=1, stride=1)
 
        self.P4_conv1 =  nn.Conv2d(1024, self.out_channels, kernel_size=1, stride=1)
        self.P4_conv2 = nn.Conv2d(self.out_channels, self.out_channels, kernel_size=3, stride=1, padding=1)

        self.P3_conv1 = nn.Conv2d(512, self.out_channels, kernel_size=1, stride=1)
        self.P3_conv2 = nn.Conv2d(self.out_channels, self.out_channels, kernel_size=3, stride=1, padding=1)
        self.P2_conv1 = nn.Conv2d(256, self.out_channels, kernel_size=1, stride=1)
        self.P2_conv2 = nn.Conv2d(self.out_channels, self.out_channels, kernel_size=3, stride=1, padding=1)

    def forward(self, C1, C2, C3 ,C4, C5):

        p5_out = self.P5_conv1(C5)
        
        p4_out = torch.add(self.P4_conv1(C4), F.upsample(p5_out, scale_factor=2, mode='nearest'))
        p3_out = torch.add(self.P3_conv1(C3), F.upsample(p4_out, scale_factor=2, mode='nearest'))
        p2_out = torch.add(self.P2_conv1(C2), F.upsample(p3_out, scale_factor=2, mode='nearest'))

        p4_out = self.P4_conv2(p4_out)
        p3_out = self.P3_conv2(p3_out)
        p2_out = self.P2_conv2(p2_out)

        # P6 is used for the 5th anchor scale in RPN. Generated by
        # subsampling from P5 with stride of 2.
        p6_out = self.P6(p5_out)

        return p2_out, p3_out, p4_out, p5_out, p6_out